@page
@model sisnet.Pages.IndexModel
@{
    ViewData["Title"] = "SISNET";
}

<div class="search-page-container">
    <div class="search-bar-container">
        <span class="sisnet">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-audio-lines"><path d="M2 10v3" /><path d="M6 6v11" /><path d="M10 3v18" /><path d="M14 8v7" /><path d="M18 5v13" /><path d="M22 10v3" /></svg>
            SISNET
        </span>
        <h1>Hear it. Love it. Find it fast.</h1>
        <div class="search-input-container">
            <svg class="search-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="11" cy="11" r="8" /><line x1="21" y1="21" x2="16.65" y2="16.65" /></svg>
            <input type="text" id="searchBox" class="search-box" placeholder="Track name, artist name..." oninput="searchSongs()" />
        </div>
    </div>
    <div class="results-container">
        <ul id="results"></ul>
    </div>
</div>

@section Scripts {
    <script>
        async function searchSongs() {
            const query = document.getElementById('searchBox').value;
            const response = await fetch(`/Index?handler=SearchSongs&query=${query}`);
            const results = await response.json();

            const resultsList = document.getElementById('results');
            resultsList.innerHTML = '';

            results.forEach(song => {
                const li = document.createElement('li');
                li.textContent = `${song.artist_Name} - ${song.track_Name}`;
                resultsList.appendChild(li);
            });
        }
    </script>
}
